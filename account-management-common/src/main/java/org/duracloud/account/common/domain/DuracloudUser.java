/*
 * Copyright (c) 2009-2010 DuraSpace. All rights reserved.
 */
package org.duracloud.account.common.domain;

import org.apache.commons.lang.StringUtils;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.GrantedAuthorityImpl;
import org.springframework.security.core.userdetails.UserDetails;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

/**
 * @author "Daniel Bernstein (dbernstein@duraspace.org)"
 */
public class DuracloudUser extends BaseDomainData implements UserDetails {

    private static final long serialVersionUID = 1L;

    private String username;
    private String password;
    private String firstName;
    private String lastName;
    private String email;
    private Set<AccountRights> accountRights;

    private boolean enabled = true;
    private boolean accountNonExpired = true;
    private boolean credentialsNonExpired = true;
    private boolean accountNonLocked = true;

    public DuracloudUser(
        int id, String username, String password, String firstName,
        String lastName, String email) {
        this(id, username, password, firstName, lastName, email, 0);
    }

    public DuracloudUser(
        int id, String username, String password, String firstName,
        String lastName, String email, int counter) {
        this.id = id;
        this.username = username;
        this.password = password;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.counter = counter;
    }

    /**
     * Set rights for all accounts to which a user has access
     * @param accountRights
     */
    public void setAccountRights(Set<AccountRights> accountRights) {
        this.accountRights = accountRights;
    }

    /**
     * Set rights for a single account to which a user has access
     * @param singleAccountRights
     */
    public void setAccountRights(AccountRights singleAccountRights) {
        if(null == this.accountRights) {
            this.accountRights = new HashSet<AccountRights>();
        }
        this.accountRights.add(singleAccountRights);
    }

    public Set<Role> getRolesByAcct(int accountId) {
        Set<Role> roles = new HashSet<Role>(0);
        if (accountRights != null) {
            for (AccountRights rights : accountRights) {
                if (rights.getAccountId() == accountId) {
                    roles = rights.getRoles();
                }
            }
        }
        return roles;
    }

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        checkNotBlank("password", password);
        this.password = password;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        checkNotBlank("firstName", firstName);
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        checkNotBlank("lastName", lastName);
        this.lastName = lastName;
    }
    
    public String getEmail() {
        return email;
    }

    public void setEmail(String email){
        checkNotBlank("email", email);
        this.email = email;
    }
    private void checkNotBlank(String field, String value) throws IllegalArgumentException{
        if(StringUtils.isBlank(value)){
            throw new IllegalArgumentException(field + " is blank");
        }
    }

    /*
     * Generated by IntelliJ
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        DuracloudUser that = (DuracloudUser) o;

        if (email != null ? !email.equals(that.email) : that.email != null) {
            return false;
        }
        if (firstName != null
            ? !firstName.equals(that.firstName) : that.firstName != null) {
            return false;
        }
        if (lastName != null
            ? !lastName.equals(that.lastName) : that.lastName != null) {
            return false;
        }
        if (password != null
            ? !password.equals(that.password) : that.password != null) {
            return false;
        }
        if (username != null
            ? !username.equals(that.username) : that.username != null) {
            return false;
        }

        return true;
    }

    /*
     * Generated by IntelliJ
     */
    @Override
    public int hashCode() {
        int result = username != null ? username.hashCode() : 0;
        result = 31 * result + (password != null ? password.hashCode() : 0);
        result = 31 * result + (firstName != null ? firstName.hashCode() : 0);
        result = 31 * result + (lastName != null ? lastName.hashCode() : 0);
        result = 31 * result + (email != null ? email.hashCode() : 0);
        return result;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public boolean isAccountNonExpired() {
        return accountNonExpired;
    }

    public boolean isCredentialsNonExpired() {
        return credentialsNonExpired;
    }

    public boolean isAccountNonLocked() {
        return accountNonLocked;
    }

    /**
     * Returns the set of all possible roles a user can play This method is
     * implemented as part of the UserDetails interface (
     * <code>UserDetails</code>).
     * 
     * @return
     */
    public Collection<GrantedAuthority> getAuthorities() {
        Set<GrantedAuthority> authorities = new HashSet<GrantedAuthority>();
        for (Role role : Role.ROLE_USER.getRoleHierarchy()) {
            authorities.add(new GrantedAuthorityImpl(role.name()));
        }

        if (accountRights != null) {
            for (AccountRights rights : accountRights) {
                Set<Role> roles = rights.getRoles();
                if (roles != null) {
                    for (Role role : roles) {
                        authorities.add(role.authority());
                    }
                }
            }
        }
        return authorities;
    }

    public boolean isOwnerForAcct(int accountId) {
        return hasRoleForAcct(accountId, Role.ROLE_OWNER);
    }

    public boolean isAdminForAcct(int accountId) {
        return hasRoleForAcct(accountId, Role.ROLE_ADMIN);
    }

    public boolean isRootForAcct(int accountId) {
        return hasRoleForAcct(accountId, Role.ROLE_ROOT);
    }

    public boolean hasRoleForAcct(int accountId, Role role) {
        Set<Role> roles = getRolesByAcct(accountId);
        if (roles != null) {
            return roles.contains(role);
        }

        return false;
    }
}
