/*
 * Copyright (c) 2009-2010 DuraSpace. All rights reserved.
 */
package org.duracloud.account.common.domain;

import org.duracloud.storage.domain.StorageProviderType;

/**
 * @author: Bill Branan
 * Date: Feb 1, 2010
 */
public class StorageProviderAccount extends ProviderAccount {

    /**
     * The type of storage provider - meaning the organization acting as the
     * provider of storage services.
     */
    private StorageProviderType providerType;

    /**
     * Flag indicating the default storage preference for all content is
     * reduced redundancy (or equivalent lower-priced option at non-Amazon
     * providers.)
     */
    private boolean rrs;

    public StorageProviderAccount(int id,
                                  StorageProviderType providerType,
                                  String username,
                                  String password,
                                  boolean rrs) {
        this(id, providerType, username, password, rrs, 0);
    }

    public StorageProviderAccount(int id,
                                  StorageProviderType providerType,
                                  String username,
                                  String password,
                                  boolean rrs,
                                  int counter) {
        this.id = id;
        this.providerType = providerType;
        this.username = username;
        this.password = password;
        this.rrs = rrs;
        this.counter = counter;
    }

    public StorageProviderType getProviderType() {
        return providerType;
    }

    public boolean isRrs() {
        return rrs;
    }

    /*
     * Generated by IntelliJ
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        StorageProviderAccount that = (StorageProviderAccount) o;

        if (rrs != that.rrs) {
            return false;
        }
        if (password != null ? !password.equals(that.password) :
            that.password != null) {
            return false;
        }
        if (providerType != that.providerType) {
            return false;
        }
        if (username != null ? !username.equals(that.username) :
            that.username != null) {
            return false;
        }

        return true;
    }

    /*
     * Generated by IntelliJ
     */
    @Override
    public int hashCode() {
        int result = providerType != null ? providerType.hashCode() : 0;
        result = 31 * result + (username != null ? username.hashCode() : 0);
        result = 31 * result + (password != null ? password.hashCode() : 0);
        result = 31 * result + (rrs ? 1 : 0);
        return result;
    }
    
}
