
::Tomcat::
To use the tomcat-maven plugin to (re)deploy the webapp, add the user to 'tomcat-users.xml' :

<tomcat-users>
  <role rolename="manager"/>
  <role rolename="admin"/>
  <user username="tomcat" password="password" roles="admin,manager"/>
</tomcat-users>


::Maven::
To use the tomcat plugin, also add the 'server' to your maven 'settings.xml':

<server>
  <id>tomcat-server</id>
  <username>tomcat</username>
  <password>password</password>
</server>

Until we have an internal maven repository to host third-party jars that do not exist in an m2 repository, run the following command(s) from ./trunk:

mvn install:install-file -Dfile=resources/libs/amazon-ec2-2008-12-01-java-library.jar -DgroupId=com.amazonaws -DartifactId=ec2 -Dversion=2008-12-01 -Dpackaging=jar

mvn install:install-file -Dfile=resources/libs/amazon-ec2-2008-12-01-java-library-src.jar -DgroupId=com.amazonaws -DartifactId=ec2-src -Dversion=2008-12-01 -Dpackaging=jar

::Eclipse::
To make your .classpath resolve, from trunk run:
mvn clean install

Then in the 'Libraries' tab of the 'build-path-configuration' add a new 'variable' named 'M2_REPO'.
>Name: 'M2_REPO'
>Path: '/home/awoods/.m2/repository' [or wherever your repository is]

::Sources::
To download source jars for all dependent libraries run:
mvn dependency:sources

::Database::
The mainwebapp requires account information stored in an underlying database.
Until there is an automated way of the application creating the database for us, it needs to be done with the following steps:
>Run the following java-app: org.duraspace.mainwebapp.domain.repo.db.MainDatabaseUtil <location-of-new-DB>

To ensure that the classpath is setup properly, it is probably easiest to run this from within eclipse.

>Now the mainwebapp needs to know where this newly created database is.
 Spring injects the dataSource which it receives with a jndi lookup from the container.
 To let the container know where the database is, set the same location that you used above (<location-of-new-DB>) at build-time:
>mvn clean install -Ddatabase.home.default=<location-of-new-DB>
>This sets a variable defining the database resource in the context.xml. 
>Finally, tomcat needs to have access to the derby jdbc driver.
 So put a copy of the derbyxxx.jar that is found in the mainwebapp/WEB-INF/lib under CATALINA_HOME/lib.

